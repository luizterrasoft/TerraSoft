unit unFaturamentoManu;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, Grids, DBGrids, Mask, ExtCtrls, unFuncoes,
  FMTBcd, Provider, DBClient, DB, SqlExpr, DateUtils;

type
  TfrmFaturamentoManu = class(TForm)
    GrpBoxParcelas: TGroupBox;
    GrdParcelas: TDBGrid;
    PnAlteracao: TPanel;
    lblValor: TLabel;
    lblVencimento: TLabel;
    edtValor: TEdit;
    mskVencimento: TMaskEdit;
    BtnGravar: TBitBtn;
    BtnAlterar: TBitBtn;
    BtnConfirmar: TBitBtn;
    BtnCancelar: TBitBtn;
    PnDados: TPanel;
    Label1: TLabel;
    edtCodCondPgto: TEdit;
    BtnBuscaCondPgto: TBitBtn;
    lblCondicaoPgto: TLabel;
    BtnGerar: TBitBtn;
    qryContasPagar: TSQLQuery;
    dsContasPagar: TDataSource;
    cdsContasPagar: TClientDataSet;
    dspContasPagar: TDataSetProvider;
    Label5: TLabel;
    lblVlrTotal: TLabel;
    qryAux: TSQLQuery;
    dsAux: TDataSource;
    cdsAux: TClientDataSet;
    dspAux: TDataSetProvider;
    dsAux2: TDataSource;
    cdsAux2: TClientDataSet;
    dspAux2: TDataSetProvider;
    qryAux2: TSQLQuery;
    procedure BtnCancelarClick(Sender: TObject);
    procedure edtCodCondPgtoExit(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure BtnGerarClick(Sender: TObject);
    procedure BtnAlterarClick(Sender: TObject);
    procedure edtValorExit(Sender: TObject);
    procedure edtCodCondPgtoEnter(Sender: TObject);
    procedure BtnBuscaCondPgtoClick(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure FormKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure BtnGravarClick(Sender: TObject);
    procedure BtnConfirmarClick(Sender: TObject);
  private

    EAvista: Boolean;
    codContaAlterando: integer;
    operacao: integer;
    loFuncoes: TFuncoes;
    procedure mostraContas;

  public
    codConta: integer;
    codFornecedor: integer;
    codManutencao: integer;
    CodSubPlano: Integer;
    CodPlano: integer;
    iTipo: integer; // 1 - manutencao | 2 - Abastecimento

    QtdParcelas: integer;
    IntervaloVcto: integer;
    PrimeiroVcto: integer;
    sDescricao: string;
    sNotaFiscal: string;    
  end;

var
  frmFaturamentoManu: TfrmFaturamentoManu;

implementation

uses unDM, UnSelecaoContaAvista, unCondicoesPgto, unPrincipal,
  unPlanoContas;

{$R *.dfm}

procedure TfrmFaturamentoManu.BtnCancelarClick(Sender: TObject);
begin
  with qryContasPagar, SQL do
    begin
      Close;
      Clear;
      Add('DELETE FROM contaspagar');
      Add('WHERE codmanutencao = :manu');
      ParamByName('manu').AsInteger := codManutencao;
      ExecSQL();
    end;

  if EAvista then
    begin
      with qryContasPagar, SQL do
        begin
          Close;
          Clear;
          Add('SELECT MAX(codigo) as Codigo FROM caixa');
          Open;
          cdsContasPagar.Close;
          cdsContasPagar.Open;
        end;

      with qryAux, SQL do
        begin
          Close;
          Clear;
          Add('DELETE FROM caixa');
          Add('WHERE codigo = :cod');
          ParamByName('cod').AsInteger := cdsContasPagar.FieldByName('codigo').AsInteger;
          ExecSQL();
        end;
    end;

  Self.Close;
end;

procedure TfrmFaturamentoManu.edtCodCondPgtoExit(Sender: TObject);
begin
  if edtCodCondPgto.Text <> trim('') then
    begin
      lblCondicaoPgto.Caption := loFuncoes.BuscaFk(edtCodCondPgto.Text,'condicoespgto','descricao');
      IntervaloVcto := StrToInt(loFUncoes.BuscaFk(edtCodCondPgto.Text,'condicoespgto','DIASENTREPRESTACOES'));
      PrimeiroVcto  := StrToInt(loFUncoes.BuscaFk(edtCodCondPgto.Text,'condicoespgto','NDIASPRIMEIROVCTO'));
      QtdParcelas   := StrToInt(loFUncoes.BuscaFk(edtCodCondPgto.Text,'condicoespgto','qtdparcelas'));

      if lblCondicaoPgto.Caption = trim('') then
        begin
          edtCodCondPgto.Clear;
          BtnBuscaCondPgto.SetFocus;
        end
      else
        begin
          BtnGerar.SetFocus;
        end;
    end;
end;

procedure TfrmFaturamentoManu.FormCreate(Sender: TObject);
begin
  loFuncoes := TFuncoes.Create;
end;

procedure TfrmFaturamentoManu.FormDestroy(Sender: TObject);
begin
  loFuncoes.Free;
end;

procedure TfrmFaturamentoManu.BtnGerarClick(Sender: TObject);
var
  i: integer;
  DiasVcto: integer;
  Avista: TDate;
begin
  i := 1;

  while i <= QtdParcelas do
    begin

      if i = 1 then
        DiasVcto := PrimeiroVcto
      else
        DiasVcto := (i * IntervaloVcto);

      // verifica se a parcela é avista
      Avista := IncDay(Date,DiasVcto);

      if Avista = Date then
        EAvista := True
      else
        EAvista := False;

      // INCLUI A CONTA A PAGAR
      with qryContasPagar, SQL do
        begin
          try
            Close;
            Clear;
            Add('INSERT INTO contaspagar (lancamento,vencimento,valor,codfornecedor,codmanutencao,');
            Add('status,descricao,numeroparcela,numeronf,codsubplanoconta');

            if iTipo = 2 then
              Add(',tipo');

            if frmPrincipal.iCodUsuario > 0 then
              Add(',codusuario');

            if EAvista = true then
              Add(',datapagamento,valorpago)')
            else
              Add(')');


            Add('VALUES (:lan,:venc,:vlr,:codfor,:codmanu,:sta,:des,:npa,:nnf,:subpc');

            if iTipo = 2 then
              Add(',:tipo');            

            if frmPrincipal.iCodUsuario > 0 then
              Add(',:usu');

            if EAvista = true then
              Add(',:dtPag,:vlrpag)')
            else
              Add(')');

            if iTipo = 2 then
              ParamByName('tipo').AsString := 'A';

            ParamByName('subpc').AsInteger := CodSubPlano;
            ParamByName('lan').AsDate   := Date;
            ParamByName('venc').AsDate  := IncDay(Date,DiasVcto);
            ParamByName('vlr').AsFloat  := StrToFloat(lblVlrTotal.Caption) / QtdParcelas;
            ParamByName('codfor').AsInteger := codFornecedor;
            ParamByName('codmanu').AsInteger  := codManutencao;
            ParamByName('nnf').AsString := sNotaFiscal;

            if EAvista then
              ParamByName('sta').AsString := 'Q'
            else
              ParamByName('sta').AsString := 'A';

            ParamByName('des').AsString := sDescricao;
            ParamByName('npa').AsInteger:= i;

            if frmPrincipal.iCodUsuario > 0 then
              ParamByName('usu').AsInteger := frmPrincipal.iCodUsuario;

            if EAvista = true then
              begin
                ParamByName('dtPag').AsDate   := Date;
                ParamByName('vlrpag').AsFloat := StrToFloat(lblVlrTotal.Caption) / QtdParcelas;

                // chama a tela pra selecionar qual conta vai cair esse avista
                frmSelecaoContaAvista := TfrmSelecaoContaAvista.Create(self);
                frmSelecaoContaAvista.tela := 2;
                frmSelecaoContaAvista.ShowModal;
                FreeAndNil(frmSelecaoContaAvista);

                qryAux2.Close;
                qryAux2.SQL.Clear;
                qryAux2.SQL.Add('SELECT razaosocial FROM fornecedores');
                qryAux2.SQL.Add('WHERE codigo = :cod');
                qryAux2.ParamByName('cod').AsInteger := codFornecedor;
                qryAux2.Open;
                cdsAux2.Close;
                cdsAux2.Open;

                // lança no caixa - o avista
                with qryAux, SQL do
                  begin
                    Close;
                    Clear;
                    Add('INSERT INTO caixa (codconta,valor,descricao,data,tipo)');
                    Add('VALUES (:conta,:valor,:desc,:data,:tip)');
                    ParamByName('conta').AsInteger := codConta;
                    ParamByName('valor').AsFloat   := StrToFloat(lblVlrTotal.Caption) / QtdParcelas;
                    ParamByName('desc').AsString   := 'PGTO. A VISTA ' + sDescricao + ' ' + sNotaFiscal;
                    ParamByName('data').AsDate     := Date;
                    ParamByName('tip').AsString    := 'D';
                    ExecSQL();
                  end;
              end;

            ExecSQL();
          except
            MessageDlg('Erro ao gerar a parcela número '+ IntToStr(i)+ '!',mtError,[mbOk],0);
          end;
        end;
      i := i + 1;
    end;

  mostraContas;

  if iTipo = 1 then
    begin
      with qryAux, SQL do
        begin
          try
            Close;
            Clear;
            Add('UPDATE manutencoes SET CODCONDICAOPGTO = :cond, status = :sta');
            Add('WHERE codigo = :manu');
            ParamByName('manu').AsInteger := codManutencao;
            ParamByName('cond').AsInteger := StrToInt(edtCodCondPgto.Text);
            ParamByName('sta').AsString   := 'F';
            ExecSQL();
          except
            MessageDlg('Erro ao alterar a cond. pgto da manutenção sendo faturada!',mtError,[mbOk],0);
          end;
        end;
    end;             

  PnDados.Enabled := False;
end;

procedure TfrmFaturamentoManu.mostraContas;
begin
  with qryContasPagar, SQL do
    begin
      Close;
      Clear;
      Add('SELECT * FROM contaspagar WHERE codmanuteNcao = :manu');

      if iTipo = 2 then
        Add('AND tipo = :tipo;)

      ParamByName('manu').AsInteger := codManutencao;

      if iTipo = 2 then
        ParamByName('tipo').AsString := 'A';

      Open;
      cdsContasPagar.Close;
      cdsContasPagar.Open;

      TNumericField(cdsContasPagar.FieldByName('valor')).DisplayFormat := ',0.00;-,0.00';
    end;
end;

procedure TfrmFaturamentoManu.BtnAlterarClick(Sender: TObject);
begin
  operacao := 2;
  codContaAlterando := cdsContasPagar.FieldByName('codigo').AsInteger;

  PnAlteracao.Enabled   := True;
  edtValor.Enabled      := True;
  mskVencimento.Enabled := True;
  edtValor.Text := loFuncoes.TrataReal(cdsContasPagar.FieldByName('valor').AsString);
  mskVencimento.Text := cdsContasPagar.FieldByName('vencimento').AsString;
  edtValor.SetFocus;
end;

procedure TfrmFaturamentoManu.edtValorExit(Sender: TObject);
begin
  edtValor.Text := loFuncoes.TrataReal(edtValor.Text);
end;

procedure TfrmFaturamentoManu.edtCodCondPgtoEnter(Sender: TObject);
begin
  lblCondicaoPgto.Caption := '';
end;

procedure TfrmFaturamentoManu.BtnBuscaCondPgtoClick(Sender: TObject);
begin
  frmCondicoesPgto := TfrmCondicoesPgto.Create(self);
  frmCondicoesPgto.telaChamando := 2;
  frmCondicoesPgto.ShowModal;
  FreeAndNil(frmCondicoesPgto);

  if lblCondicaoPgto.Caption <> trim('') then
    BtnGerar.SetFocus;
end;

procedure TfrmFaturamentoManu.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if key = #13 then
    begin
      Key:= #0;
      Perform(Wm_NextDlgCtl,0,0);
    end;
end;

procedure TfrmFaturamentoManu.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if key = VK_ESCAPE then
    Self.Close;
end;

procedure TfrmFaturamentoManu.BtnGravarClick(Sender: TObject);
begin
  if (edtValor.Text <> trim('')) and (edtValor.Text <> trim('0,00')) and (mskVencimento.Text <> '  /  /    ') then
    begin
      with qryContasPagar, SQL do
        begin
          Close;
          Clear;
          Add('UPDATE contaspagar SET valor = :vlr, vencimento = :vcto');
          Add('WHERE codigo = :cod');
          ParamByName('cod').AsInteger := codContaAlterando;
          ParamByName('vlr').AsFloat   := StrToFloat(edtValor.Text);
          ParamByName('vcto').AsDate   := StrToDate(mskVencimento.Text);
          ExecSQL();
        end;
    end
  else
    begin
      MessageDlg('Verifique os dados que estão sendo alterarados!',mtWarning,[mbOk],0);
      edtValor.SetFocus;
    end;

  mostraContas;
end;

procedure TfrmFaturamentoManu.BtnConfirmarClick(Sender: TObject);
begin
  Self.Close;
end;

end.
