unit unAbastecimentos;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls, Buttons, Mask, Grids, DBGrids, FMTBcd,
  SqlExpr, Provider, DB, DBClient, unFuncoes;

type
  TfrmAbastecimentos = class(TForm)
    PnConsulta: TPanel;
    PnAbastecimentos: TPanel;
    PnBotoes: TPanel;
    Label1: TLabel;
    edtCodTipoCombustivel: TEdit;
    BtnBuscaTipoCombustivel: TBitBtn;
    Label2: TLabel;
    lblTipoCombustivel: TLabel;
    edtCodEquipamento: TEdit;
    BtnBuscaEquipamento: TBitBtn;
    lblEquipamento: TLabel;
    Label3: TLabel;
    edtCodFornecedor: TEdit;
    BtnBuscaFornecedor: TBitBtn;
    lblFornecedor: TLabel;
    Label4: TLabel;
    edtCodFuncionario: TEdit;
    BtnBuscaFuncionario: TBitBtn;
    lblFuncionario: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    mskInicial: TMaskEdit;
    mskFinal: TMaskEdit;
    BtnConsultar: TBitBtn;
    BtnRelatorio: TBitBtn;
    BtnIncluir: TBitBtn;
    BtnVisualizar: TBitBtn;
    BtnExcluir: TBitBtn;
    BtnMarcar: TBitBtn;
    BtnSair: TBitBtn;
    GrdAbastecimentos: TDBGrid;
    BtnDesmarcar: TBitBtn;
    BtnMarcarTodos: TBitBtn;
    BtnDesmarcarTodos: TBitBtn;
    BtnFechar: TBitBtn;
    dsAbastecimentos: TDataSource;
    cdsAbastecimentos: TClientDataSet;
    dspAbastecimentos: TDataSetProvider;
    qryAbastecimentos: TSQLQuery;
    procedure BtnSairClick(Sender: TObject);
    procedure BtnIncluirClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure edtCodTipoCombustivelExit(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure BtnVisualizarClick(Sender: TObject);
  private

    loFuncoes: TFuncoes;
    procedure mostraAbastecimentos;
    procedure carregaDados;
  public
    { Public declarations }
  end;

var
  frmAbastecimentos: TfrmAbastecimentos;

implementation

uses unDM, unIncluirAbastecimento;

{$R *.dfm}

procedure TfrmAbastecimentos.BtnIncluirClick(Sender: TObject);
begin
  try
    frmIncluirAbastecimento := TfrmIncluirAbastecimento.Create(self);
    frmIncluirAbastecimento.iOpc := 1;
    frmIncluirAbastecimento.ShowModal;
  finally
    FreeAndNil(frmIncluirAbastecimento);
    mostraAbastecimentos;
  end;
end;

procedure TfrmAbastecimentos.BtnSairClick(Sender: TObject);
begin
  Self.Close;
end;

procedure TfrmAbastecimentos.BtnVisualizarClick(Sender: TObject);
begin
  try
    frmIncluirAbastecimento := TfrmIncluirAbastecimento.Create(self);
    frmIncluirAbastecimento.iOpc := 0;
    carregaDados;
    frmIncluirAbastecimento.ShowModal;
  finally
    FreeAndNil(frmIncluirAbastecimento);
  end;
end;

procedure TfrmAbastecimentos.carregaDados;
begin
  frmIncluirAbastecimento.edtCodTipoCombustivel.Text  := cdsAbastecimentos.FieldByName('codtipocombustivel').AsString;
  frmIncluirAbastecimento.lblTipoCombustivel.Caption  := cdsAbastecimentos.FieldByName('TIPO').AsString;
  frmIncluirAbastecimento.edtCodEquipamento.Text      := cdsAbastecimentos.FieldByName('codequipamento').AsString;
  frmIncluirAbastecimento.lblEquipamento.Caption      := cdsAbastecimentos.FieldByName('equipamento').AsString;
  frmIncluirAbastecimento.edtCodFornecedor.Text       := cdsAbastecimentos.FieldByName('codfornecedor').AsString;
  frmIncluirAbastecimento.lblFornecedor.Caption       := cdsAbastecimentos.FieldByName('razaosocial').AsString;
  frmIncluirAbastecimento.edtCodFuncionario.Text      := cdsAbastecimentos.FieldByName('codfuncionario').AsString;
  frmIncluirAbastecimento.lblFuncionario.Caption      := cdsAbastecimentos.FieldByName('nome').AsString;
  frmIncluirAbastecimento.edtQtd.Text                 := cdsAbastecimentos.FieldByName('qtd').AsString;
  frmIncluirAbastecimento.edtVlrUnit.Text             := loFuncoes.TrataReal(cdsAbastecimentos.FieldByName('vlrunit').AsString);
  frmIncluirAbastecimento.edtVlrTotal.Text            := loFuncoes.TrataReal(cdsAbastecimentos.FieldByName('total').AsString);
  frmIncluirAbastecimento.mskDataAbast.Text           := cdsAbastecimentos.FieldByName('dataabastecimento').AsString;
  frmIncluirAbastecimento.edtKMHora.Text              := cdsAbastecimentos.FieldByName('kmhr').AsString;
  frmIncluirAbastecimento.RchEdtObs.Text              := cdsAbastecimentos.FieldByName('obs').AsString;

end;

procedure TfrmAbastecimentos.edtCodTipoCombustivelExit(Sender: TObject);
begin
  if edtCodTipoCombustivel.Text <> trim('') then
    begin
      lblTipoCombustivel.Caption := loFuncoes.BuscaFk(edtCodTipoCombustivel.Text,'tiposcombustiveis','descricao');

      if lblTipoCombustivel.Caption = trim('') then
        begin
          edtCodTipoCombustivel.Clear;
          BtnBuscaTipoCombustivel.SetFocus;
        end
      else
        edtCodEquipamento.SetFocus;
    end;
end;

procedure TfrmAbastecimentos.FormCreate(Sender: TObject);
begin
  loFuncoes := TFuncoes.Create;
end;

procedure TfrmAbastecimentos.FormDestroy(Sender: TObject);
begin
  loFuncoes.Free;
end;

procedure TfrmAbastecimentos.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_ESCAPE then
    BtnSairClick(self);
end;

procedure TfrmAbastecimentos.mostraAbastecimentos;
begin
  try
    qryAbastecimentos.Close;
    qryAbastecimentos.SQL.Clear;
    qryAbastecimentos.SQL.Add('SELECT aba.codigo, tp.descricao AS TIPO,');
    qryAbastecimentos.SQL.Add('equi.descricao AS EQUIPAMENTO, forn.razaosocial, aba.qtd,');
    qryAbastecimentos.SQL.Add('aba.dataabastecimento,fun.nome, aba.kmhr, aba.obs, aba.vlrunit,');
    qryAbastecimentos.SQL.Add('aba.total, aba.codtipocombustivel, aba.codfornecedor, aba.codfuncionario,');
    qryAbastecimentos.SQL.Add('aba.codequipamento');
    qryAbastecimentos.SQL.Add('FROM abastecimentos aba');
    qryAbastecimentos.SQL.Add('INNER JOIN tiposcombustiveis tp');
    qryAbastecimentos.SQL.Add('ON tp.codigo = aba.codtipocombustivel');
    qryAbastecimentos.SQL.Add('INNER JOIN equipamentos equi');
    qryAbastecimentos.SQL.Add('ON equi.codigo = aba.codequipamento');
    qryAbastecimentos.SQL.Add('INNER JOIN fornecedores forn');
    qryAbastecimentos.SQL.Add('ON forn.codigo = aba.codfornecedor');
    qryAbastecimentos.SQL.Add('INNER JOIN funcionarios fun');
    qryAbastecimentos.SQL.Add('ON fun.codigo = aba.codfuncionario');
    qryAbastecimentos.SQL.Add('WHERE aba.dataabastecimento BETWEEN :dtini AND :dtfin');
    qryAbastecimentos.ParamByName('dtini').AsDate := StrToDate(mskInicial.Text);
    qryAbastecimentos.ParamByName('dtfin').AsDate := StrToDate(mskFinal.Text);
    qryAbastecimentos.Open;
    cdsAbastecimentos.Close;
    cdsAbastecimentos.Open;
  except
    on e: Exception do
    raise Exception.Create('Não foi possível consultar os abastecimentos!' + #13 + e.Message);
  end;
end;



end.
